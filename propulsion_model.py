import numpy as np
import scipy.io as io
from scipy.interpolate import interp2d
import matplotlib.pyplot as plt
from dynamic_constants import ANGULAR_MOMENTUM, ENGINE_ORIENTATION
from numpy import cos, sin


#Read .mat data.
engine_data = io.loadmat('f16_EngineData.mat')


data = engine_data['f16_EngineData']
print(data[0][0][0][0][0][0][0][0][1])

mach_discrete = [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
altitude_discrete = [0, 10000, 20000, 30000, 40000, 50000]

idle_thrust = interp2d(altitude_discrete, mach_discrete, data[0][0][0][0][0][0][0][0][0])
mil_thrust = interp2d(altitude_discrete, mach_discrete, data[0][0][0][0][0][0][0][0][1])
max_thrust = interp2d(altitude_discrete, mach_discrete, data[0][0][0][0][0][0][0][0][2])


# fig = plt.figure(figsize=(10, 10))
# ax = fig.add_subplot(111)
# x_range = np.arange(0, 50000, 500)
# mach_range = np.arange(0, 1.05, 0.1)
# for mach in mach_range:
#     ax.plot(x_range, max_thrust(x_range, mach), label=f'mach={mach}')
#
# plt.legend(loc='lower right')
# plt.show()


def propulsion(thrust_input, mach, altitude):
    """
    Calculates the force and moment generated by the engines.

    :param thrust_input: amount of % thrust input. ranges between 0-1.
    :param mach: current mach speed.
    :param altitude: current altitude in meters.
    :return: the force and moment generated by the engines as a numpy array.
    """


    if thrust_input <= 0:
        thrust = idle_thrust(altitude, mach)
    elif 0 < thrust_input <= 0.77:
        thrust = idle_thrust(altitude, mach) + (mil_thrust(altitude, mach) - idle_thrust(altitude, mach)) * thrust_input / 0.77
    else:
        thrust = mil_thrust(altitude, mach) + (max_thrust(altitude, mach) - mil_thrust(altitude, mach)) * (thrust_input - 0.77) / 0.77

    #convert from lbs to newtons.
    thrust = thrust * 4.4482216153

    roty = np.array([
        [cos(ENGINE_ORIENTATION[0]), 0, -sin(ENGINE_ORIENTATION[0])],
        [0, 1, 0],
        [sin(ENGINE_ORIENTATION[0]), 0, cos(ENGINE_ORIENTATION[0])]
    ])

    rotx = np.array([

    ])

    return np.array([Fp, Mp])